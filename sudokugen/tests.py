import numpy as np
import pytest

from . import db
from . import client
from . import solve
from . import transform as tf


@pytest.fixture
def board():
    return np.array(
      [[1, 3, 5, 2, 7, 8, 9, 6, 4],
       [6, 8, 2, 4, 9, 5, 7, 1, 3],
       [9, 7, 4, 3, 1, 6, 5, 2, 8],
       [2, 6, 1, 9, 4, 7, 8, 3, 5],
       [3, 5, 7, 6, 8, 2, 4, 9, 1],
       [8, 4, 9, 1, 5, 3, 6, 7, 2],
       [7, 2, 3, 5, 6, 4, 1, 8, 9],
       [5, 9, 6, 8, 3, 1, 2, 4, 7],
       [4, 1, 8, 7, 2, 9, 3, 5, 6]], int)


@pytest.fixture
def invalid_board():
    return np.array(
      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 1, 0, 0, 0, 0, 0, 0],
       [0, 4, 0, 0, 0, 0, 0, 0, 0],
       [0, 9, 0, 0, 0, 0, 0, 0, 0],
       [0, 7, 0, 7, 0, 0, 0, 3, 0],
       [0, 5, 0, 0, 0, 0, 0, 0, 0],
       [0, 6, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 3, 0]], int)


@pytest.fixture
def corrupt_board():
    return np.array(
      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 1, 0, 0, 0, 0, 0, 0],
       [0, 4, 0, 0, -999, 0, 0, 0, 0],
       [0, 9, 0, 0, 0, 0, 0, 0, 0],
       [0, 7, 0, 100, 0, 0, 0, 3, 0],
       [0, 5, 0, 0, 0, 0, 0, 0, 0],
       [0, 6, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 3, 0]], int)


@pytest.fixture
def easy_board():
    return np.array(
      [[0, 3, 6, 8, 9, 2, 7, 1, 5],
       [5, 0, 2, 0, 7, 1, 9, 0, 3],
       [9, 0, 7, 5, 6, 3, 4, 8, 2],
       [0, 4, 3, 1, 5, 8, 2, 0, 7],
       [8, 5, 9, 6, 0, 7, 1, 3, 0],
       [7, 2, 0, 9, 3, 4, 8, 5, 6],
       [0, 0, 0, 2, 8, 6, 5, 0, 1],
       [0, 0, 0, 3, 1, 0, 0, 4, 9],
       [0, 0, 0, 7, 4, 9, 3, 2, 8]], int)


@pytest.fixture
def hard_board():
    """
    This is Skiena's example of a hard Sudoku puzzle
    (as in, difficult for a computer and impossible for
     a human to solve). See "The Algorithm Design Manual"
     Chapter 7 Section 3 for more details.
    """
    return np.array(
      [[0, 0, 0, 0, 0, 0, 0, 1, 2],
       [0, 0, 0, 0, 3, 5, 0, 0, 0],
       [0, 0, 0, 6, 0, 0, 0, 7, 0],
       [7, 0, 0, 0, 0, 0, 3, 0, 0],
       [0, 0, 0, 4, 0, 0, 8, 0, 0],
       [1, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 2, 0, 0, 0, 0],
       [0, 8, 0, 0, 0, 0, 0, 4, 0],
       [0, 5, 0, 0, 0, 0, 6, 0, 0]], int)


@pytest.fixture
def sparse_board():
    return np.array(
      [[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 0, 0],
       [0, 2, 0, 0, 0, 0, 0, 0, 0],
       [0, 4, 0, 0, 0, 0, 0, 0, 0],
       [0, 9, 0, 0, 0, 0, 0, 0, 0],
       [0, 7, 0, 0, 0, 0, 0, 3, 0],
       [0, 5, 0, 0, 0, 0, 0, 0, 0],
       [0, 6, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]], int)

